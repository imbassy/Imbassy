// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3x4s7P8yWmfzeCC9Kkgod5
// Component: Nhk3oZa1CKg3O9
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import PriceCard from "../../PriceCard" // plasmic-import: r6Ew0aWs1pwLGl/component
import { useScreenVariants as useScreenVariantsfjHrDbfqgibjX } from "./PlasmicGlobalVariant__Screen" // plasmic-import: fj_HrDbfqgibjX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_dark_saa_s_landing_page.module.css" // plasmic-import: 3x4s7P8yWmfzeCC9Kkgod5/projectcss
import * as sty from "./PlasmicPriceSection.module.css" // plasmic-import: Nhk3oZa1CKg3O9/css

export const PlasmicPriceSection__VariantProps = new Array()

export const PlasmicPriceSection__ArgProps = new Array()

function PlasmicPriceSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfjHrDbfqgibjX(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uGhoi)}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__pyLic)}>
              <PriceCard
                borders={["flatLeft"]}
                className={classNames("__wab_instance", sty.priceCard__vXmGv)}
              />
            </div>
          ) : null}

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__sYcgF)}>
              <div className={classNames(projectcss.all, sty.freeBox__rW0B)}>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"We Recommended"}
                </div>
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <PriceCard
                  borders={["flatCenter"]}
                  className={classNames("__wab_instance", sty.priceCard__lCX8)}
                />
              ) : null}
            </div>
          ) : null}

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__u6P9F)}>
              <PriceCard
                borders={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ["flatRight"]
                    : ["flatRight"]
                }
                className={classNames("__wab_instance", sty.priceCard__t6V2)}
              />
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPriceSection__ArgProps,
          internalVariantPropNames: PlasmicPriceSection__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicPriceSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceSection"
  } else {
    func.displayName = `PlasmicPriceSection.${nodeName}`
  }
  return func
}

export const PlasmicPriceSection = Object.assign(
  // Top-level PlasmicPriceSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicPriceSection
    internalVariantProps: PlasmicPriceSection__VariantProps,
    internalArgProps: PlasmicPriceSection__ArgProps,
  }
)

export default PlasmicPriceSection
/* prettier-ignore-end */
