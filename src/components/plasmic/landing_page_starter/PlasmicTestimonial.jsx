// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i1R9JuZcEVnjtzkqUFoFHH
// Component: i0rbI2fw5_5Rqp
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: i1R9JuZcEVnjtzkqUFoFHH/projectcss
import * as sty from "./PlasmicTestimonial.module.css" // plasmic-import: i0rbI2fw5_5Rqp/css
import tracyBmsRhkRZdOLp5Q from "./images/tracy.png" // plasmic-import: BMSRhkRZdOLp5q/picture

export const PlasmicTestimonial__VariantProps = new Array()

export const PlasmicTestimonial__ArgProps = new Array(
  "name",
  "title",
  "quote",
  "image"
)

function PlasmicTestimonial__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image: {
            src: tracyBmsRhkRZdOLp5Q,
            fullWidth: 500,
            fullHeight: 500,
            aspectRatio: undefined,
          },
        },

        props.args
      ),

    [props.args]
  )

  const $props = args
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__c9Gps)}
      >
        {p.renderPlasmicSlot({
          defaultContents:
            '"A sem a velit consequat a torquent posuere nibh consectetur ac sodales mi vulputate imperdiet suspendisse a adipiscing felis convallis est tristique faucibus condimentum ante viverra."',
          value: args.quote,
          className: classNames(sty.slotTargetQuote),
        })}
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__gvmVa)}
      >
        <p.PlasmicImg
          data-plasmic-name={"authorPicture"}
          data-plasmic-override={overrides.authorPicture}
          alt={""}
          className={classNames(sty.authorPicture)}
          displayHeight={"64px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"64px"}
          src={args.image}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qWbSk)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__npd5M)}>
            {p.renderPlasmicSlot({
              defaultContents: "Tracy Jordan",
              value: args.name,
              className: classNames(sty.slotTargetName),
            })}
          </div>

          {p.renderPlasmicSlot({
            defaultContents: "Comedian, TGS",
            value: args.title,
            className: classNames(sty.slotTargetTitle),
          })}
        </p.Stack>
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "authorPicture"],
  authorPicture: ["authorPicture"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestimonial__ArgProps,
          internalVariantPropNames: PlasmicTestimonial__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonial"
  } else {
    func.displayName = `PlasmicTestimonial.${nodeName}`
  }
  return func
}

export const PlasmicTestimonial = Object.assign(
  // Top-level PlasmicTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    authorPicture: makeNodeComponent("authorPicture"),
    // Metadata about props expected for PlasmicTestimonial
    internalVariantProps: PlasmicTestimonial__VariantProps,
    internalArgProps: PlasmicTestimonial__ArgProps,
  }
)

export default PlasmicTestimonial
/* prettier-ignore-end */
