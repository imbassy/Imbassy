// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i1R9JuZcEVnjtzkqUFoFHH
// Component: 4wsahiqcK13Kja
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Logo from "../../Logo" // plasmic-import: uS1uLwuSb3ygBY/component
import Button from "../../Button" // plasmic-import: P_arPT46Us9VtF/component
import { useScreenVariants as useScreenVariantsmcpPndYlKly8 } from "./PlasmicGlobalVariant__Screen" // plasmic-import: -mcpPnd-YLKly8/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: i1R9JuZcEVnjtzkqUFoFHH/projectcss
import * as sty from "./PlasmicFooterSection.module.css" // plasmic-import: 4wsahiqcK13Kja/css
import TwitterIcon from "./icons/PlasmicIcon__Twitter" // plasmic-import: RGh-ST_Wa-vqZl/icon
import GithubIcon from "./icons/PlasmicIcon__Github" // plasmic-import: nHXx0ZttC9woHa/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin" // plasmic-import: _diuNifbPhD1sZ/icon

export const PlasmicFooterSection__VariantProps = new Array()

export const PlasmicFooterSection__ArgProps = new Array()

function PlasmicFooterSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmcpPndYlKly8(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__t0Snp)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mkYug)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            _50Opaque={true}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ivKi)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__maLeb
              )}
            >
              {"Connect with us"}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lWm7)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg__fYr9L)}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__p5Vuj)}
                role={"img"}
              />

              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg___4QDe1)}
                role={"img"}
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bwAo9)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nHm8R
            )}
          >
            {"Product"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button___22QUq)}
            color={"navLink"}
            flat={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8CRv
              )}
            >
              {"Pricing"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__nRdw)}
            color={"navLink"}
            flat={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lXu
              )}
            >
              {"Log in"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button___6H8Zn)}
            color={"navLink"}
            flat={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f9Vyz
              )}
            >
              {"Integrations"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__fHyWo)}
            color={"navLink"}
            flat={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lpVz
              )}
            >
              {"Insights"}
            </div>
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__na1FF)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zb5N
            )}
          >
            {"Support"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__t9Hc1)}
            color={"navLink"}
            flat={true}
          >
            {"Documentation"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__qPc3K)}
            color={"navLink"}
            flat={true}
          >
            {"FAQs"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__cpbMm)}
            color={"navLink"}
            flat={true}
          >
            {"Status"}
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vtydl)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wLClt
            )}
          >
            {"Company"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__d4Pwr)}
            color={"navLink"}
            flat={true}
          >
            {"About"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__e66I)}
            color={"navLink"}
            flat={true}
          >
            {"Contact us"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__zdSoo)}
            color={"navLink"}
            flat={true}
          >
            {"Careers"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button___153FM)}
            color={"navLink"}
            flat={true}
          >
            {"Media"}
          </Button>
        </p.Stack>
      </p.Stack>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooterSection__ArgProps,
          internalVariantPropNames: PlasmicFooterSection__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection"
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`
  }
  return func
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps,
  }
)

export default PlasmicFooterSection
/* prettier-ignore-end */
