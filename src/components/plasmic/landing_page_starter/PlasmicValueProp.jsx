// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i1R9JuZcEVnjtzkqUFoFHH
// Component: VP6O7ilIkb2hnk
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: i1R9JuZcEVnjtzkqUFoFHH/projectcss
import * as sty from "./PlasmicValueProp.module.css" // plasmic-import: VP6O7ilIkb2hnk/css

export const PlasmicValueProp__VariantProps = new Array(
  "flatIcon",
  "vertical",
  "card",
  "noTitle",
  "darkBackground"
)

export const PlasmicValueProp__ArgProps = new Array(
  "description",
  "icon",
  "title"
)

function PlasmicValueProp__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcard]: hasVariant(variants, "card", "card"),
          [sty.rootcard_vertical]:
            hasVariant(variants, "card", "card") &&
            hasVariant(variants, "vertical", "vertical"),
          [sty.rootflatIcon]: hasVariant(variants, "flatIcon", "flatIcon"),
          [sty.rootnoTitle]: hasVariant(variants, "noTitle", "noTitle"),
          [sty.rootvertical]: hasVariant(variants, "vertical", "vertical"),
        }
      )}
    >
      <div
        data-plasmic-name={"iconContainer"}
        data-plasmic-override={overrides.iconContainer}
        className={classNames(projectcss.all, sty.iconContainer, {
          [sty.iconContainercard]: hasVariant(variants, "card", "card"),
          [sty.iconContainercard_vertical]:
            hasVariant(variants, "card", "card") &&
            hasVariant(variants, "vertical", "vertical"),
          [sty.iconContainerflatIcon]: hasVariant(
            variants,
            "flatIcon",
            "flatIcon"
          ),

          [sty.iconContainervertical]: hasVariant(
            variants,
            "vertical",
            "vertical"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zQyUt)}
              displayHeight={"56px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"56px"}
              src={
                "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png"
              }
            />
          ),

          value: args.icon,
        })}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainerflatIcon]: hasVariant(
            variants,
            "flatIcon",
            "flatIcon"
          ),

          [sty.contentContainernoTitle]: hasVariant(
            variants,
            "noTitle",
            "noTitle"
          ),
        })}
      >
        {(hasVariant(variants, "noTitle", "noTitle") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: "Label",
              value: args.title,
              className: classNames(sty.slotTargetTitle, {
                [sty.slotTargetTitledarkBackground]: hasVariant(
                  variants,
                  "darkBackground",
                  "darkBackground"
                ),

                [sty.slotTargetTitlenoTitle]: hasVariant(
                  variants,
                  "noTitle",
                  "noTitle"
                ),
              }),
            })
          : null}

        {p.renderPlasmicSlot({
          defaultContents:
            "Porttitor feugiat a scelerisque nullam parturient vestibulum tempor a litora suscipit arcu potenti varius venenatis venenatis dapibus fames adipiscing in in taciti.",
          value: args.description,
          className: classNames(sty.slotTargetDescription, {
            [sty.slotTargetDescriptioncard]: hasVariant(
              variants,
              "card",
              "card"
            ),

            [sty.slotTargetDescriptiondarkBackground]: hasVariant(
              variants,
              "darkBackground",
              "darkBackground"
            ),

            [sty.slotTargetDescriptionnoTitle]: hasVariant(
              variants,
              "noTitle",
              "noTitle"
            ),
          }),
        })}
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "iconContainer", "contentContainer"],
  iconContainer: ["iconContainer"],
  contentContainer: ["contentContainer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValueProp__ArgProps,
          internalVariantPropNames: PlasmicValueProp__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicValueProp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicValueProp"
  } else {
    func.displayName = `PlasmicValueProp.${nodeName}`
  }
  return func
}

export const PlasmicValueProp = Object.assign(
  // Top-level PlasmicValueProp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconContainer: makeNodeComponent("iconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    // Metadata about props expected for PlasmicValueProp
    internalVariantProps: PlasmicValueProp__VariantProps,
    internalArgProps: PlasmicValueProp__ArgProps,
  }
)

export default PlasmicValueProp
/* prettier-ignore-end */
